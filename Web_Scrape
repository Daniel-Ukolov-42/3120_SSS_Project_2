import requests
from bs4 import BeautifulSoup
import pandas as pd


#updated dictonary with roster that have no missing height values 
sports_teams = {
    #medgarevans request is getting 404
    'mens_swimming' : ['https://csidolphins.com/sports/mens-swimming-and-diving/roster/2023-2024?view=2', 'https://yorkathletics.com/sports/mens-swimming-and-diving/roster','https://athletics.baruch.cuny.edu/sports/mens-swimming-and-diving/roster?view=2', 'https://www.brooklyncollegeathletics.com/sports/mens-swimming-and-diving/roster/2019-20?view=2', 'https://lindenwoodlions.com/sports/mens-swimming-and-diving/roster/2021-22?view=2', 'https://mckbearcats.com/sports/mens-swimming-and-diving/roster/2023-24?view=2', 'https://ramapoathletics.com/sports/mens-swimming-and-diving/roster?view=2', 'https://oneontaathletics.com/sports/mens-swimming-and-diving/roster?view=2', 'https://binghamtonbearcats.com/sports/mens-swimming-and-diving/roster/2021-22?view=2', 'https://albrightathletics.com/sports/mens-swimming-and-diving/roster/2021-22?view=2'],
    'mens_volleyball' : ['https://ccnyathletics.com/sports/mens-volleyball/roster?view=2', 'https://lehmanathletics.com/sports/mens-volleyball/roster?view=2', 'https://www.brooklyncollegeathletics.com/sports/mens-volleyball/roster?view=2', 'https://johnjayathletics.com/sports/mens-volleyball/roster?view=2', 'https://athletics.baruch.cuny.edu/sports/mens-volleyball/roster?view=2', 'https://www.huntercollegeathletics.com/sports/mens-volleyball/roster?view=2', 'https://mecathletics.com/sports/mens-volleyball/roster', 'https://yorkathletics.com/sports/mens-volleyball/roster', 'https://ballstatesports.com/sports/mens-volleyball/roster'],
    'womens_swimming' : ['https://csidolphins.com/sports/womens-swimming-and-diving/roster/2023-2024?view=2', 'https://queensknights.com/sports/womens-swimming-and-diving/roster/2019-20', 'https://yorkathletics.com/sports/womens-swimming-and-diving/roster', 'https://athletics.baruch.cuny.edu/sports/womens-swimming-and-diving/roster/2024-25?view=2', 'https://www.brooklyncollegeathletics.com/sports/womens-swimming-and-diving/roster/2022-23?view=2', 'https://lindenwoodlions.com/sports/womens-swimming-and-diving/roster/2021-22?view=2', 'https://mckbearcats.com/sports/womens-swimming-and-diving/roster', 'https://ramapoathletics.com/sports/womens-swimming-and-diving/roster?view=2','https://keanathletics.com/sports/womens-swimming-and-diving/roster?view=2', 'https://oneontaathletics.com/sports/womens-swimming-and-diving/roster/2021-22?view=2'],
    'womens_volleyball' : ['https://bmccathletics.com/sports/womens-volleyball/roster/2022?view=2', 'https://yorkathletics.com/sports/womens-volleyball/roster', 'https://hostosathletics.com/sports/womens-volleyball/roster/2022-2023?view=2', 'https://bronxbroncos.com/sports/womens-volleyball/roster/2021?view=2', 'https://queensknights.com/sports/womens-volleyball/roster?view=2', 'https://augustajags.com/sports/wvball/roster?view=2', 'https://flaglerathletics.com/sports/womens-volleyball/roster?view=2', 'https://pacersports.com/sports/womens-volleyball/roster', 'https://www.golhu.com/sports/womens-volleyball/roster?view=2']
    
}



def average_height(url_list):

  # list to store heights
  heights = []
  names = []

  # vist each url in the list
  for url in url_list:

    # headers Source: https://www.zenrows.com/blog/web-scraping-headers#user-agent
      # headers Source: https://www.zenrows.com/blog/web-scraping-headers#user-agent
      #This block of code is to ensure we avoid getting a 404/block after making a request to the site
    headers = {
      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      'Accept-Language': 'en-US,en;q=0.9',
      'Connection': 'keep-alive'
      }

    # making a request to the server
    page = requests.get(url, headers=headers)

    # scrape data only if connection is successful
    if page.status_code == 200:
      # import the raw html into BeautifulSoup
      soup = BeautifulSoup(page.content, 'html.parser')

      # find all td tags with a class of height
      raw_heights = soup.find_all('td', class_ ='height')


      # find all td tags with a class of sidearm-table-player-name
      name_tags = soup.find_all('td', class_ ='sidearm-table-player-name')

      # extracting the name from the name tags
      for name_tag in name_tags:
        names.append(name_tag.get_text().strip())

      # extract the raw height from the list
      for raw_height in raw_heights:
        x = raw_height.get_text()
        # splitting the string by the '-'
        feet = float(x.split('-')[0]) * 12
        inches = float(x.split('-')[1])

        # converting height to inches
        height_inches = feet + inches

        heights.append(height_inches)


  # organized the data as a dictionary
  data = {
      'Name': names,
      'Height': heights
  }

  df = pd.DataFrame(data)
  return df






